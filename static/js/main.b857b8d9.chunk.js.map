{"version":3,"sources":["utils/action-helper.js","store/ducks/posts.duck.js","crud/posts.crud.js","models/labelForButtons.js","App.js","store/rootDuck.js","store/store.js","index.js"],"names":["createAction","type","payload","undefined","fetchSaga","saga","initialState","liked","subreddit","newPosts","posts","loading","success","error","actions","clearFetch","fetchRequest","fetchSuccess","fetchFail","likePost","delPost","call","axios","get","data","put","response","message","takeLatest","labelForButtons","id","label","connector","connect","state","postsActions","useState","myPosts","setMyPosts","useEffect","className","map","item","key","onClick","onDragEnd","drag","destination","items","Array","from","splice","source","index","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","CircularProgress","post","draggableId","draggableProps","dragHandleProps","Checkbox","onChange","value","icon","checkedIcon","IconButton","size","disabled","href","permalink","target","title","placeholder","rootSaga","rootReducer","combineReducers","action","forEach","dist","children","push","updatedPosts","all","fork","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b857b8d9.chunk.js","sourcesContent":["//* Тут всё очевидно, это намного лучше чем бесконечно диспатчить\r\n\r\nexport const createAction = (type, payload) => {\r\n  return payload === undefined ? { type } : { type, payload }\r\n};\r\n\r\n","import { put, takeLatest, call } from 'redux-saga/effects';\r\nimport { createAction } from '../../utils/action-helper';\r\nimport { fetchPosts } from '../../crud/posts.crud.js';\r\n\r\nconst CLEAR_FETCH = 'posts/CLEAR_FETCH';\r\nconst FETCH_REQUEST = 'posts/FETCH_REQUEST';\r\nconst FETCH_SUCCESS = 'posts/FETCH_SUCCESS';\r\nconst FETCH_FAIL = 'posts/FETCH_FAIL';\r\n\r\nconst LIKE_POST = \"posts/LIKE_POST\";\r\nconst DEL_POST = \"posts/DEL_POST\";\r\n\r\nconst initialState = {\r\n  liked: false,\r\n  subreddit: undefined,\r\n  newPosts: [],\r\n  posts: undefined,\r\n  loading: false,\r\n  success: false,\r\n  error: null,\r\n};\r\n\r\nexport const postsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CLEAR_FETCH: {\r\n      return { ...state, posts: undefined, loading: false, success: false, error: null };\r\n    }\r\n\r\n    case FETCH_REQUEST: {\r\n      return { ...state, posts: undefined, loading: true, success: false, error: null };\r\n    }\r\n\r\n    case FETCH_SUCCESS: {\r\n      action.payload.forEach((item) => {\r\n        if (item.data.dist) {\r\n          item.data.children.map(post => {\r\n            state.newPosts.push(post);\r\n          }); \r\n        }\r\n      });\r\n\r\n      return { ...state, posts: state.newPosts, loading: false, success: true };\r\n    }\r\n\r\n    case FETCH_FAIL: {\r\n      return { ...state, loading: false, error: action.payload };\r\n    }\r\n\r\n    case LIKE_POST: {\r\n      return { ...state, liked: action.payload }\r\n    }\r\n\r\n    case DEL_POST: {\r\n      let updatedPosts = [];\r\n      state.newPosts.forEach(item => {\r\n        if (item.data.id !== action.payload) updatedPosts.push(item);\r\n      });\r\n\r\n      return { ...state, newPosts: updatedPosts }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  clearFetch: () => createAction(CLEAR_FETCH),\r\n  fetchRequest: (payload) => createAction(FETCH_REQUEST, payload),\r\n  fetchSuccess: (payload) => createAction(FETCH_SUCCESS, payload),\r\n  fetchFail: (payload) => createAction(FETCH_FAIL, payload),\r\n\r\n  likePost: (payload) => createAction(LIKE_POST, payload),\r\n\r\n  delPost: (payload) => createAction(DEL_POST, payload),\r\n};\r\n\r\nfunction* fetchSaga({ payload }) {\r\n  try {\r\n    const { data } = yield call(() => fetchPosts(payload));\r\n    yield put(actions.fetchSuccess(data));\r\n  } catch (e) {\r\n    yield put(actions.fetchFail(e?.response?.data?.message || 'Произошла ошибка.'));\r\n  }\r\n}\r\n\r\nexport function* saga() {\r\n  yield takeLatest(FETCH_REQUEST, fetchSaga);\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport const fetchPosts = (subreddit) => {\r\n  return axios.get(`https://www.reddit.com/r/${subreddit}/random.json`);\r\n};","const labelForButtons = [\r\n  {id: 1, label: \"Frontend\"},\r\n  {id: 2, label: \"ReactJS\"},\r\n  {id: 3, label: \"VueJS\"},\r\n  {id: 4, label: \"Angular\"}\r\n];\r\n\r\nexport default labelForButtons;","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nimport { Checkbox } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\nimport { actions as postsActions } from './store/ducks/posts.duck';\n\nimport labelForButtons from './models/labelForButtons.js';\nimport './scss/index.scss';\n\n//* Раз уж это тестовое задание позволю себе оставлять некоторые комментарии по коду\n//* (некоторые === чуть более уточняющие (ну так на всякий))\n\n//* Так же тут напишу непосредственно почему сделал через duck и зачем папка crud, когда cruda нет\n//* Я привык думать наперёд, мне важно заранее знать о том, как я буду масштабировать код, а также,\n//* Что не мало важно, как его будут понимать и масштабировать другие\n//* Поэтому я прибегаю к duck паттерну(?) + это довольно удобно не нужно всё бить на 1000 папок\n//* Crud пишу для всех операций с axios, люблю когда такой код где-то в другом месте\n//* Чуть детальнее можно обсудить на интервью :) ток напомните\n\nfunction App({\n  liked,\n  newPosts,\n\n  loading,\n  success,\n  error,\n\n  clearFetch,\n  fetchRequest,\n\n  likePost,\n\n  delPost,\n}) {\n  //* Этот стейт чисто для драг н дропа (не нарушаем правила тз)\n  const [myPosts, setMyPosts] = useState(newPosts);\n\n  //* Фикс проблемы с перетаскиванием в драг н дропе\n  const handleOnDragEnd = (drag) => {\n    if (!drag.destination) return;\n    const items = Array.from(myPosts);\n    const [reorderedItem] = items.splice(drag.source.index, 1);\n    items.splice(drag.destination.index, 0, reorderedItem);\n\n    setMyPosts(items);\n  }\n\n  //* Я обхожу через мар именно myPosts из локального стейка из-за драг н дропа\n  //* Поэтому тут при изменении newPosts (удалении) я обновляю и myPosts\n  useEffect(() => {\n    setMyPosts(newPosts);\n  }, [newPosts]);\n\n  useEffect(() => {\n    if (success || error) clearFetch();\n  }, [success, error, clearFetch]);\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"button-contain\">\n        {labelForButtons.map((item) => (\n          <button\n            className={`button-contain__item button-contain__item_${item.id} bounce-${item.id}`}\n            key={item.id}\n            onClick={() => fetchRequest(item.label)}>\n            {item.label}\n          </button>\n        ))}\n      </div>\n\n      <DragDropContext onDragEnd={handleOnDragEnd}>\n        <Droppable droppableId=\"posts\">\n          {(provided) => (\n            <div className=\"posts-contain\" {...provided.droppableProps} ref={provided.innerRef}>\n              {loading ? (\n                <CircularProgress />\n              ) : (\n                myPosts.map((post, index) => (\n                  <Draggable key={post.data.id} draggableId={post.data.id} index={index}>\n                    {(provided) => (\n                      <div\n                        className=\"posts-contain__item\"\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}>\n                        <Checkbox\n                          onChange={() => likePost()}\n                          value={liked}\n                          icon={<FavoriteBorderIcon />}\n                          checkedIcon={<FavoriteIcon />}\n                        />\n\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => delPost(post.data.id)}\n                          disabled={loading}>\n                          <DeleteIcon />\n                        </IconButton>\n\n                        <a href={`https://www.reddit.com/${post.data.permalink}`} target=\"_blank\">\n                          {post.data.title}\n                        </a>\n                      </div>\n                    )}\n                  </Draggable>\n                ))\n              )}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n}\n\n//* Использую коннектор, а не useSelector т.к. много чего надо вытаскивать из стейта\nconst connector = connect(\n  (state) => ({\n    liked: state.posts.liked,\n    newPosts: state.posts.newPosts,\n\n    loading: state.posts.loading,\n    success: state.posts.success,\n    error: state.posts.error,\n  }),\n  {\n    clearFetch: postsActions.clearFetch,\n    fetchRequest: postsActions.fetchRequest,\n\n    likePost: postsActions.likePost,\n\n    delPost: postsActions.delPost,\n  },\n);\n\nexport default connector(App);\n","import { all, fork } from \"redux-saga/effects\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nimport * as posts from \"./ducks/posts.duck.js\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  posts: posts.postsReducer,\r\n});\r\n\r\nexport function* rootSaga() {\r\n  yield all([\r\n    posts.saga,\r\n  ].map(saga => fork(saga)));\r\n};\r\n\r\n\r\n","import { applyMiddleware, createStore, compose } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport { rootReducer, rootSaga } from \"./rootDuck\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}